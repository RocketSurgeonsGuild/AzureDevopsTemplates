parameters:
  Configuration: Release
  Verbosity: Normal
  DotNetSdk:
    - 2.2.x
    - 3.0.x
  NuGetVersion: "5.3.0"
  BranchNameFix: true
  Targets: "Default"
  EnableReleaseNotes: true
  GitHub: false
  GitHubPackages: false
  GithubAuthVariableGroup: ""
  MonoVersion: "6.4.0"
  MyGetPackages: false
  AuthNuGetFeeds: []
  NuGetConfig: 'NuGet.config'
  PublishNuGetPackages: 'Windows'
  Matrix:
    Windows:
      BuildName: "Windows"
      ImageName: "windows-latest"
    Linux:
      BuildName: "Linux"
      ImageName: "ubuntu-latest"
    macOS:
      BuildName: "macOS"
      ImageName: "macOS-latest"
  Steps:
    - template: ./default-nuke-steps.yml
jobs:
  - job: GitVersion
    pool:
      vmImage: windows-latest
    steps:
      - template: ../support/gitversion-store.yml
        parameters:
          BranchNameFix: ${{ parameters.BranchNameFix }}

  - template: ../support/publish-release.yml
    parameters:
      EnableReleaseNotes: ${{ parameters.EnableReleaseNotes }}
      GitHub: ${{ parameters.GitHub }}
      GitHubPackages: ${{ parameters.GitHubPackages }}
      GitHubAuthVariableGroup: ${{ parameters.GitHubAuthVariableGroup }}
      MyGetPackages: ${{ parameters.MyGetPackages }}
      NuGetVersion: ${{ parameters.NuGetVersion }}
      Postfix: " - ${{ parameters.PublishNuGetPackages }}"
      AuthNuGetFeeds: ${{ parameters.AuthNuGetFeeds }}

  - job: Build
    dependsOn:
      - ${{ if and(eq(parameters.EnableReleaseNotes, 'true'), eq(parameters.GitHub, 'true'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')) }}:
        - GitHub_Draft_Release
    variables:
      - ${{ if ne(parameters.GitHubAuthVariableGroup, '') }}:
        - group: ${{ parameters.GitHubAuthVariableGroup }}
    strategy:
      matrix: ${{ parameters.Matrix }}
    pool:
      vmImage: $(ImageName)
    steps:
      - script: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
          sudo apt install apt-transport-https ca-certificates
          echo "deb https://download.mono-project.com/repo/ubuntu vs-xenial/snapshots/6.4.0.198 main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
          sudo apt update
          sudo apt install mono-devel
          sudo apt install msbuild
        displayName: Use Mono ${{ parameters.MonoVersion }}
        condition: eq(variables['Agent.OS'], 'Linux')

      - script: |
          curl -o mono.pkg https://download.mono-project.com/archive/${{ parameters.MonoVersion }}/macos-10-universal/MonoFramework-MDK-${{ parameters.MonoVersion }}.198.macos10.xamarin.universal.pkg
          sudo installer -pkg mono.pkg -target /
          sudo cp -rf /Library/Frameworks/Mono.framework/Versions/${{ parameters.MonoVersion }}/ /Library/Frameworks/Mono.framework/Versions/Current/
          MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/${{ parameters.MonoVersion }}
          echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
          echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
          echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"
        displayName: Use Mono ${{ parameters.MonoVersion }}
        failOnStderr: false
        condition: eq(variables['Agent.OS'], 'Darwin')

      - ${{ if and(eq(parameters.EnableReleaseNotes, 'true'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')) }}:
          - download: current
            displayName: "Download Release Notes (Tag)"
            artifact: "ReleaseNotes"
          - pwsh: |
              $content = Get-Content -Raw '$(Pipeline.Workspace)\ReleaseNotes\release-current.md';
              $content = ($content -replace '\n', '%0A') -replace '\r', '%0D'
              Write-Host "##vso[task.setvariable variable=PackageReleaseNotes]$($content)"
            displayName: 'Replace whitespace'

      - template: ../support/gitversion-hack.yml
        parameters:
          BranchNameFix: ${{ parameters.BranchNameFix }}

      - template: ../support/install-dotnet.yml
        parameters:
          DotNetSdk: ${{ parameters.DotNetSdk }}
          AuthNuGetFeeds: ${{ parameters.AuthNuGetFeeds }}

      - task: DotNetCoreCLI@2
        displayName: "dotnet tool restore"
        inputs:
          command: custom
          custom: tool
          arguments: "restore"

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: restore
          feedsToUse: config
          nugetConfigPath: ${{ parameters.NuGetConfig }}
          verbosityRestore: ${{ parameters.Verbosity }}

      - ${{ if eq(parameters.Steps, '') }}:
      - ${{ parameters.Steps }}

      - template: ../support/publish-artifacts.yml
        parameters:
          Configuration: ${{ parameters.Configuration }}
          Postfix: ' - $(BuildName)'
          PublishXUnit: false
          PublishVSTest: true
