parameters:
  DotNet21Version: "2.1.x"
  DotNetVersion: "2.2.x"
  DotNet3Version: "3.0.100-rc1-014190"

steps:
  - task: UseDotNet@2
    displayName: Install dotnet ${{ parameters.DotNetVersion }}
    inputs:
      packageType: "sdk"
      version: ${{ parameters.DotNetVersion }}
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: UseDotNet@2
    displayName: Install dotnet ${{ parameters.DotNet3Version }}
    inputs:
      packageType: "sdk"
      version: ${{ parameters.DotNet3Version }}
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: DotNetCoreCLI@2
    displayName: "dotnet tool restore"
    inputs:
      command: custom
      custom: tool
      arguments: "restore"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - pwsh: |
      $parts = '$(Build.Repository.Name)' -split '/';
      Write-Host "##vso[task.setvariable variable=GitHub.Owner]$($parts[0])"
      Write-Host "##vso[task.setvariable variable=GitHub.Repository]$($parts[1])"
    displayName: "Assign GitHub.Owner and GitHub.Repository"

  - pwsh: mkdir $(Build.ArtifactStagingDirectory)/releasenotes/;
    displayName: "Create release notes directory"

  - pwsh: |
      $token = "$(GitHub.Token)";
      $password = '$(GitHub.Password)'
      $repository = "$(GitHub.Repository)";
      $owner = "$(GitHub.Owner)";
      $tag = "v$(GitVersion.MajorMinorPatch)";
      $sha = "$(Build.SourceVersion)";
      $username = "$(GitHub.Username)"
      $outfile = "$(Build.ArtifactStagingDirectory)/releasenotes/release-v$(GitVersion.MajorMinorPatch).md";

      $newTag = dotnet gitreleasemanager create --username "$username" --password "$password" --owner "$owner" --repository "$repository" -n "$tag" -c "$sha" -m "$tag";
      dotnet gitreleasemanager export --username "$username" --password "$password" --owner "$owner" --repository "$repository" -f "$(Build.ArtifactStagingDirectory)/releasenotes/release-v$(GitVersion.MajorMinorPatch).md" -t $tag
      $tagName = $tag -split '/' | select -Last 1;
      $item = Invoke-RestMethod `
          -Uri "https://api.github.com/repos/$owner/$repository/releases/tags/$tagName" `
          -Headers @{  Authorization = "Token $token" } `
          -Method Get;
      Invoke-RestMethod `
          -Uri "https://api.github.com/repos/$owner/$repository/releases/$($item.id)" `
          -Headers @{  Authorization = "Token $token" } `
          -Method Delete;

    displayName: "Get up to date changeset details from GitHub_Release"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: GitHubRelease@0
    displayName: "Update GitHub_Release"
    inputs:
      gitHubConnection: github
      action: edit
      title: v$(GitVersion.MajorMinorPatch)
      tag: v$(GitVersion.MajorMinorPatch)
      isDraft: true
      isPreRelease: false
      releaseNotesFile: "$(Build.ArtifactStagingDirectory)/releasenotes/release-v$(GitVersion.MajorMinorPatch).md"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - pwsh: |
      $password = '$(GitHub.Password)'
      $repository = "$(GitHub.Repository)";
      $owner = "$(GitHub.Owner)";
      $tag = "v$(GitVersion.MajorMinorPatch)";
      $username = "$(GitHub.Username)"

      dotnet gitreleasemanager export --username "$username" --password "$password" --owner "$owner" --repository "$repository" -f "$(Build.ArtifactStagingDirectory)/releasenotes/release-v$(GitVersion.MajorMinorPatch).md" -t $tag
      dotnet gitreleasemanager export --username "$username" --password "$password" --owner "$owner" --repository "$repository" -f "$(Build.ArtifactStagingDirectory)/releasenotes/release.md"
    displayName: "Export Release Notes"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - publish: "$(Build.ArtifactStagingDirectory)/releasenotes/"
    displayName: Publish Release Notes
    artifact: "Release Notes"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - pwsh: |
      $token = "$(GitHub.Token)";
      $repository = "$(GitHub.Repository)";
      $owner = "$(GitHub.Owner)";
      $tag = "v$(GitVersion.MajorMinorPatch)";

      $milestones = Invoke-RestMethod `
          -Uri "https://api.github.com/repos/$owner/$repository/milestones?state=open" `
          -Headers @{  Authorization = "Token $token" } `
          -Method Get;

      $currentMilestone = $milestones | where { $_.title -eq $tag }
      if (-not ($currentMilestone)) {
          Invoke-RestMethod `
              -Uri "https://api.github.com/repos/$owner/$repository/milestones/$($currentMilestone.number)" `
              -Headers @{  Authorization = "Token $token" } `
              -Method Delete
      }
    displayName: "Delete v$(GitVersion.MajorMinorPatch) Milestone"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
