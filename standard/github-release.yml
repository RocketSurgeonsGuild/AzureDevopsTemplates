parameters:
  DotNetVersion: "2.2.300"
  DotNet3Version: "3.0.100-preview6-012264"

steps:
  - task: UseDotNet@2
    displayName: Install dotnet ${{ parameters.DotNetVersion }}
    inputs:
      packageType: 'sdk'
      version: ${{ parameters.DotNetVersion }}

  - task: UseDotNet@2
    displayName: Install dotnet ${{ parameters.DotNet3Version }}
    inputs:
      packageType: 'sdk'
      version: ${{ parameters.DotNet3Version }}

  - task: DotNetCoreCLI@2
    displayName: 'dotnet tool install gitreleasemanager.tool'
    inputs:
      command: custom
      custom: tool
      arguments: 'install gitreleasemanager.tool'

  - pwsh: |
      $parts = '$(Build.Repository.Name)' -split '/';
      Write-Host "##vso[task.setvariable variable=GitHub.Owner]$($parts[0])"
      Write-Host "##vso[task.setvariable variable=GitHub.Repository]$($parts[1])"
    displayName: 'Assign GitHub.Owner and GitHub.Repository'

  - pwsh: mkdir $(Build.ArtifactStagingDirectory)\releasenotes\;
    displayName: "Create release notes directory"

  # - pwsh: |
  #     $response = Invoke-RestMethod -Uri https://api.github.com/graphql -Headers @{  Authorization = "Token $(GitHub.Token)" } -Method Post -Body (@{ query = "query getDrafts(`$owner: String!, `$name: String!) { repository(owner: `$owner, name: `$name) { releases(last: 100) { nodes { id, name, isDraft, isPrerelease, tagName } } } }"; variables = @{ owner = "$(GitHub.Owner);" name = "$(GitHub.Repository)" }  } | ConvertTo-Json)
  #     $release = $response.data.repository.releases.nodes | where { $_.isDraft } | select -First 1;
  #     if ($release) {
  #       Invoke-RestMethod -Uri "https://api.github.com/repos/RocketSurgeonsGuild/Build/releases" `
  #         -Headers @{ Authorization = "Bearer $(GitHub.Token)" } `
  #         -Method Post `
  #         -Body (@{ `
  #           draft = $true; `
  #           name = "v$(GitVersion.MajorMinorPatch)"; `
  #           target_commitish = "master"; `
  #           tag_name = "v$(GitVersion.MajorMinorPatch)"; `
  #         } | ConvertTo-Json);
  #     } else {
  #       Invoke-RestMethod -Uri "https://api.github.com/repos/RocketSurgeonsGuild/Build/releases" -Headers @{ Authorization = "Bearer $(GitHub.Token)" } -Method Post -Body (@{ draft = $true; name = "v$(GitVersion.MajorMinorPatch)"; target_commitish = "master"; tag_name = "v$(GitVersion.MajorMinorPatch)"; } | ConvertTo-Json)
  #     }

  - task: GitHubRelease@0
    displayName: 'Create GitHub Release'
    continueOnError: true
    inputs:
      gitHubConnection: github
      tagSource: manual
      action: edit
      title: v$(GitVersion.MajorMinorPatch)
      tag: v$(GitVersion.MajorMinorPatch)
      isDraft: true
      isPreRelease: false
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: dotnet gitreleasemanager export -u "$(GitHub.Username)" -p "$(GitHub.Password)" -o "$(GitHub.Owner)" -r "$(GitHub.Repository)" -t "v$(GitVersion.MajorMinorPatch)" -d $(Build.ArtifactStagingDirectory)\releasenotes\ -f 'release-v$(GitVersion.MajorMinorPatch).md'
    displayName: 'Export v$(GitVersion.MajorMinorPatch) Release Notes'

  - script: dotnet gitreleasemanager export -u "$(GitHub.Username)" -p "$(GitHub.Password)" -o "$(GitHub.Owner)" -r "$(GitHub.Repository)" -d '$(Build.ArtifactStagingDirectory)\releasenotes\' -f 'release.md'
    displayName: 'Export Release Notes'

  - task: PublishBuildArtifacts@1
    displayName: Publish Release Notes
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)/releasenotes/"
      ArtifactName: "Release Notes"
      ArtifactType: "Container"

  - task: GitHubRelease@0
    displayName: 'Update GitHub Release'
    inputs:
      gitHubConnection: github
      action: edit
      title: v$(GitVersion.MajorMinorPatch)
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/releasenotes/release-v$(GitVersion.MajorMinorPatch).md
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: dotnet gitreleasemanager close -u "$(GitHub.Username)" -p "$(GitHub.Password)" -o "$(GitHub.Owner)" -r "$(GitHub.Repository)" -m "v$(GitVersion.MajorMinorPatch)"
    displayName: 'Close v$(GitVersion.MajorMinorPatch) Milestone'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
