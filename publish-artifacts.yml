parameters:
  Configuration: 'Release'
  Coverage: '$(Agent.BuildDirectory)/c'
  Artifacts: $(Build.ArtifactStagingDirectory)

steps:
- task: PublishTestResults@2
  displayName: Publish Tests (XUnit)
  condition: always()
  inputs:
    testRunner: "XUnit"
    testResultsFiles: "${{ parameters.Artifacts }}/test/**/*.xml"
    testRunTitle: "XUnit Results - $(system.phaseName)"
    buildPlatform: ${{ parameters.os }}
    buildConfiguration: ${{ parameters.Configuration }}

- task: PublishTestResults@2
  displayName: Publish Tests (VSTest)
  condition: always()
  inputs:
    testRunner: "VSTest"
    testResultsFiles: "${{ parameters.Artifacts }}/test/**/*.trx"
    testRunTitle: "XUnit Results - $(system.phaseName)"
    buildPlatform: ${{ parameters.os }}
    buildConfiguration: ${{ parameters.Configuration }}

- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage
  condition: always()
  inputs:
    codeCoverageTool: "Cobertura"
    summaryFileLocation: "${{ parameters.Coverage }}/solution.cobertura"
    reportDirectory: "${{ parameters.Coverage }}/report/"
    # failIfCoverageEmpty: "true"

- bash: bash <(curl -s https://codecov.io/bash) -f "${{ parameters.Coverage }}/solution.xml" -P "$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER"
  env:
    VCS_COMMIT_ID: $(Build.SourceVersion)
    VCS_BRANCH_NAME: $(Build.SourceBranchName)
    VCS_PULL_REQUEST: $(System.PullRequest.PullRequestNumber)
    CI_BUILD_URL: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
    CI_BUILD_ID: $(Build.BuildNumber)-$(Agent.OS)
    CI_JOB_ID: $(System.TeamProject)-$(Build.Repository.Name)-$(Build.BuildNumber)
    CODECOV_NAME: $(Build.Repository.Name)
    CODECOV_TOKEN: $(CodeCovToken)
  displayName: Upload coverage to CodeCov
  condition: and(succeeded(), ne(variables['CodeCovToken'], ''))

- publish: "${{ parameters.Artifacts }}/logs/"
  displayName: Publish Logs
  artifact: "Logs - $(system.phaseName)"
  condition: always()

- publish: ${{ parameters.Coverage }}
  displayName: Publish Coverage
  artifact: "Coverage - $(system.phaseName)"
  condition: always()

- publish: "${{ parameters.Artifacts }}/nuget/"
  displayName: Publish Nupkg Artifacts
  artifact: "Nupkg - $(system.phaseName)"
  continueOnError: true
  condition: always()


# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: 'src'
#     includeRootFolder: false
#     archiveType: 'zip' # Options: zip, 7z, tar, wim
#     archiveFile: '${{ parameters.Artifacts }}/srcfolder/$(Build.BuildId).zip'
#     replaceExistingArchive: true
#     # verbose: # Optional
#     # quiet: # Optional

# - publish: "${{ parameters.Artifacts }}/srcfolder/"
#   displayName: Publish Build Src Folder
#   artifact: "Src - $(system.phaseName)"

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: 'test'
#     includeRootFolder: false
#     archiveType: 'zip' # Options: zip, 7z, tar, wim
#     archiveFile: '${{ parameters.Artifacts }}/testfolder/$(Build.BuildId).zip'
#     replaceExistingArchive: true
#     # verbose: # Optional
#     # quiet: # Optional

# - publish: "${{ parameters.Artifacts }}/testfolder/"
#   displayName: Publish Build Test Folder
#   artifact: "Test - $(system.phaseName)"
